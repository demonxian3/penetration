变量覆盖漏洞的条件

  变量如果未初始化，且能被用户控制
  在php.ini配置文件中，开启了register_globals 更严重
  此为全局变量覆盖利用

  不过我去看了我的php.ini时没有看到这个register_globals开关
  我的php版本号是5.5.38


================================================
<?php

  $x = "demon";
  $y = "night";

  echo $x . "<hr>" . $y . "<hr>";

  $y = $_GET['x'];

  echo $y;
?>
================================================
http://www.xxx.com/overwrite.php?x=test

可以看到 第二个$y 的值就是我们传递的值，我感觉这个好像并没有什么




来自网上讲解的一个变量覆盖漏洞
----------------------------------------------------------
DEDECMS全局变量覆盖漏洞
  最早是狼族安全小组09年公布的，官方硬撑到现在没修补漏洞，
  到现在基本上覆盖了DEDECMS全部的版本。个人猜想是不是官方故意留下的后门。
  下面稍微介绍下这个漏洞，大牛们可以完全无视：


一. 了解PHP超级全局变量

下面是PHP的超级全局变量，可以了解一个特性，全是数组。

$GLOBALS, 所有全局变量数组

$_SERVER， 服务器环境变量数组

$_GET，通过GET方法传递给脚本的变量数组

$_POST， 通过POST方法传递给脚本的变量数组

$_COOKIE，cookie变量数组

$_REQUEST，所有用户输入的变量数组，包括$_GET, $_POST和$_COOKIE所包含的输入内容

$_FILES，与文件上传相关得变量数组

$_ENV，环境变量数组

$_SESSION，会话变量数组


二. 理解$_GET变量

来看个PHP代码：

test.php
================================================
<?php
  var_dump($_GET);
?>
================================================

（1）访问http://localhost/test.php?key=value 结果为：
  
  array(1) { ["key"]=> string(5) "value" } 

看到这里应该明白$_GET就是个数组，我们用GET方法可以传一个数组。



（2）访问http://192.168.10.100/test.php?key[arr1]=value 结果为：

  array(1) { ["key"]=> array(1) { ["arr1"]=> string(5) "value" } }

这里我们通过GET方法传入了一个嵌套数组。


深入跟进DEDECMS全局变量注册漏洞 真正理解了$_GET变量后，我们来深入跟进这个漏洞产生的真正原因，模拟一下漏洞的全过程：


访问http://192.168.10.100/test.php?_POST[GLOBALS][cfg_dbname]=X  结果为：

  array(1) { ["_POST"]=> array(1) { ["GLOBALS"]=> array(1) { ["cfg_dbname"]=> string(1) "X" } } } 

这里提交了一个嵌套数组，假如数据传入了DEDECMS程序，
在第一层过滤，DEDECMS会检查$_REQUEST里有没有全局变量的关键字，
但我们的KEY是_POST且是个数组，所以轻松绕过。

其过滤代码如下：eregi用于匹配关键字
============================================================
foreach($_REQUEST as $_k=>$_v){
  if( strlen($_k)>0 && eregi('^(cfg_|GLOBALS)',$_k) ) { 
      exit('Request var not allow!');
  }
}
============================================================



接着进入真正的注册变量流程，按顺序是先从$_GET变量注册的，
我们的KEY是（_POST)，第一轮遍历$_GET成功注册了变量$_POST,
第二轮遍历$_POST成功注册了变量$GLOBALS !


注册代码如下：
============================================================
foreach(Array('_GET','_POST','_COOKIE') as $_request){
  foreach($$_request as $_k => $_v) ${$_k} = _RunMagicQuotes($_v);
}
============================================================
到这里漏洞的原因就清楚了，程序通过$_GET注册了$_POST，通过$_POST注册了$GLOBALS！


关于补丁：
首先 Discuz 的处理是，当发现KEY第一个字符存在下划线_就不注册变量。
============================================================
foreach(array('_COOKIE', '_POST', '_GET') as $_request){
  foreach($$_request as $_key => $_value) {
    $_key{0} != '_' && $$_key = addslashes($_value);
  }
}
============================================================

也可以使用临时修补，遍历$_POST变量，发现存在Globals就阻止注册变量
============================================================
foreach(Array('_GET','_POST','_COOKIE') as $_request){
  foreach($$_request as $_k => $_v) {
     if( strlen($_k)>0 && eregi('^(cfg_|GLOBALS)',$_k) ){         
        exit('Request var not allow!');             
     }              
     ${$_k} = _RunMagicQuotes($_v);       
  }
}
============================================================




关于magic_quotes的php知识点
  php_magic_quotes 常见的几个设置如下

     magic_quotes_gpc
     magic_quotes_sybase
     magic_quote_runtime

  这几个函数是在php.ini中去配置的
  从手册中可以看出从php5.3后已经废除了这些特性，
  所以强烈大家不要使用，在php.ini中关闭它。

  防止sql注入的时候，很多人会这样写：
============================================================
if(!get_magic_quotes_gpc())
  $post=addslashes($post);
============================================================
开启了它们，会自动给你转义单引号、双引号、反斜线 与 null,其实就相当于调用addslashes函数
安全性更高了，但是移植性差了对于上所有gpc（$_GET,$_POST,$_COOKIE）的数据你都进行转义是否有必要？开销有多大？







